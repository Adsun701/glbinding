
#include "GLMeta_ReqVersionsByExtension.h"

#include <glbinding/GLextension.h>


const std::unordered_map<GLextension, Meta_ReqVersionsByExtension::ucharpair> GLMeta_ReqVersionsByExtension = 
{
    { GLextension::AMD_seamless_cubemap_per_texture, ucharpair(3, 2) },
    { GLextension::ARB_ES2_compatibility, ucharpair(4, 1) },
    { GLextension::ARB_ES3_compatibility, ucharpair(4, 3) },
    { GLextension::ARB_base_instance, ucharpair(4, 2) },
    { GLextension::ARB_blend_func_extended, ucharpair(3, 3) },
    { GLextension::ARB_buffer_storage, ucharpair(4, 4) },
    { GLextension::ARB_clear_buffer_object, ucharpair(4, 3) },
    { GLextension::ARB_clear_texture, ucharpair(4, 4) },
    { GLextension::ARB_compressed_texture_pixel_storage, ucharpair(4, 2) },
    { GLextension::ARB_copy_image, ucharpair(4, 3) },
    { GLextension::ARB_debug_output, ucharpair(4, 3) },
    { GLextension::ARB_depth_buffer_float, ucharpair(3, 0) },
    { GLextension::ARB_depth_clamp, ucharpair(3, 2) },
    { GLextension::ARB_depth_texture, ucharpair(1, 4) },
    { GLextension::ARB_draw_buffers, ucharpair(2, 0) },
    { GLextension::ARB_draw_buffers_blend, ucharpair(4, 0) },
    { GLextension::ARB_draw_elements_base_vertex, ucharpair(3, 2) },
    { GLextension::ARB_draw_indirect, ucharpair(4, 0) },
    { GLextension::ARB_draw_instanced, ucharpair(3, 1) },
    { GLextension::ARB_enhanced_layouts, ucharpair(4, 4) },
    { GLextension::ARB_explicit_uniform_location, ucharpair(4, 3) },
    { GLextension::ARB_fragment_shader, ucharpair(2, 0) },
    { GLextension::ARB_framebuffer_no_attachments, ucharpair(4, 3) },
    { GLextension::ARB_framebuffer_object, ucharpair(4, 4) },
    { GLextension::ARB_framebuffer_sRGB, ucharpair(3, 0) },
    { GLextension::ARB_get_program_binary, ucharpair(4, 1) },
    { GLextension::ARB_gpu_shader5, ucharpair(4, 0) },
    { GLextension::ARB_gpu_shader_fp64, ucharpair(4, 0) },
    { GLextension::ARB_half_float_pixel, ucharpair(3, 0) },
    { GLextension::ARB_half_float_vertex, ucharpair(3, 0) },
    { GLextension::ARB_instanced_arrays, ucharpair(3, 3) },
    { GLextension::ARB_internalformat_query, ucharpair(4, 2) },
    { GLextension::ARB_invalidate_subdata, ucharpair(4, 3) },
    { GLextension::ARB_map_buffer_alignment, ucharpair(4, 2) },
    { GLextension::ARB_map_buffer_range, ucharpair(4, 4) },
    { GLextension::ARB_multi_bind, ucharpair(4, 4) },
    { GLextension::ARB_multi_draw_indirect, ucharpair(4, 3) },
    { GLextension::ARB_multisample, ucharpair(1, 3) },
    { GLextension::ARB_multitexture, ucharpair(1, 3) },
    { GLextension::ARB_occlusion_query, ucharpair(1, 5) },
    { GLextension::ARB_occlusion_query2, ucharpair(3, 3) },
    { GLextension::ARB_pixel_buffer_object, ucharpair(2, 1) },
    { GLextension::ARB_point_parameters, ucharpair(1, 4) },
    { GLextension::ARB_point_sprite, ucharpair(2, 0) },
    { GLextension::ARB_program_interface_query, ucharpair(4, 3) },
    { GLextension::ARB_provoking_vertex, ucharpair(3, 2) },
    { GLextension::ARB_query_buffer_object, ucharpair(4, 4) },
    { GLextension::ARB_sample_shading, ucharpair(4, 0) },
    { GLextension::ARB_sampler_objects, ucharpair(3, 3) },
    { GLextension::ARB_seamless_cube_map, ucharpair(3, 2) },
    { GLextension::ARB_seamless_cubemap_per_texture, ucharpair(3, 2) },
    { GLextension::ARB_separate_shader_objects, ucharpair(4, 1) },
    { GLextension::ARB_shader_atomic_counters, ucharpair(4, 2) },
    { GLextension::ARB_shader_image_load_store, ucharpair(4, 2) },
    { GLextension::ARB_shader_storage_buffer_object, ucharpair(4, 3) },
    { GLextension::ARB_shader_subroutine, ucharpair(4, 0) },
    { GLextension::ARB_shading_language_100, ucharpair(2, 0) },
    { GLextension::ARB_shadow, ucharpair(1, 4) },
    { GLextension::ARB_stencil_texturing, ucharpair(4, 3) },
    { GLextension::ARB_sync, ucharpair(3, 2) },
    { GLextension::ARB_tessellation_shader, ucharpair(4, 0) },
    { GLextension::ARB_texture_border_clamp, ucharpair(1, 3) },
    { GLextension::ARB_texture_buffer_object_rgb32, ucharpair(3, 0) },
    { GLextension::ARB_texture_buffer_range, ucharpair(4, 3) },
    { GLextension::ARB_texture_compression, ucharpair(1, 3) },
    { GLextension::ARB_texture_compression_bptc, ucharpair(4, 2) },
    { GLextension::ARB_texture_compression_rgtc, ucharpair(3, 0) },
    { GLextension::ARB_texture_cube_map, ucharpair(1, 3) },
    { GLextension::ARB_texture_cube_map_array, ucharpair(4, 0) },
    { GLextension::ARB_texture_env_combine, ucharpair(1, 3) },
    { GLextension::ARB_texture_env_dot3, ucharpair(1, 3) },
    { GLextension::ARB_texture_mirror_clamp_to_edge, ucharpair(4, 4) },
    { GLextension::ARB_texture_mirrored_repeat, ucharpair(1, 4) },
    { GLextension::ARB_texture_multisample, ucharpair(3, 2) },
    { GLextension::ARB_texture_rectangle, ucharpair(3, 1) },
    { GLextension::ARB_texture_rg, ucharpair(3, 0) },
    { GLextension::ARB_texture_rgb10_a2ui, ucharpair(3, 3) },
    { GLextension::ARB_texture_stencil8, ucharpair(4, 4) },
    { GLextension::ARB_texture_storage, ucharpair(4, 2) },
    { GLextension::ARB_texture_storage_multisample, ucharpair(4, 3) },
    { GLextension::ARB_texture_swizzle, ucharpair(3, 3) },
    { GLextension::ARB_texture_view, ucharpair(4, 3) },
    { GLextension::ARB_timer_query, ucharpair(3, 3) },
    { GLextension::ARB_transform_feedback3, ucharpair(4, 0) },
    { GLextension::ARB_transform_feedback_instanced, ucharpair(4, 2) },
    { GLextension::ARB_transpose_matrix, ucharpair(1, 3) },
    { GLextension::ARB_vertex_array_bgra, ucharpair(1, 2) },
    { GLextension::ARB_vertex_array_object, ucharpair(3, 0) },
    { GLextension::ARB_vertex_attrib_64bit, ucharpair(4, 1) },
    { GLextension::ARB_vertex_attrib_binding, ucharpair(4, 3) },
    { GLextension::ARB_vertex_buffer_object, ucharpair(1, 5) },
    { GLextension::ARB_vertex_type_10f_11f_11f_rev, ucharpair(4, 4) },
    { GLextension::ARB_vertex_type_2_10_10_10_rev, ucharpair(3, 3) },
    { GLextension::ARB_viewport_array, ucharpair(4, 1) },
    { GLextension::ARB_window_pos, ucharpair(1, 4) },
    { GLextension::EXT_vertex_array_bgra, ucharpair(1, 2) },
    { GLextension::NV_vertex_program3, ucharpair(2, 0) },
    { GLextension::OES_depth_texture, ucharpair(1, 1) },
    { GLextension::OES_element_index_uint, ucharpair(1, 1) },
    { GLextension::OES_texture_float, ucharpair(1, 1) }
};
