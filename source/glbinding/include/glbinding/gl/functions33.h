#pragma once

#include <glbinding/glbinding_api.h>

#include <glbinding/gl/nogl.h>

#include <glbinding/gl/types.h>

namespace gl33
{

#include <glbinding/gl/types.inl>

} // namespace gl33


#include <glbinding/glbinding.h>

namespace gl33
{

inline GLBINDING_API void glAccum(GLenum op, GLfloat value);
inline GLBINDING_API void glActiveTexture(GLenum texture);
inline GLBINDING_API void glAlphaFunc(GLenum func, GLfloat ref);
inline GLBINDING_API GLboolean glAreTexturesResident(GLsizei n, const GLuint * textures, GLboolean * residences);
inline GLBINDING_API void glArrayElement(GLint i);
inline GLBINDING_API void glAttachShader(GLuint program, GLuint shader);
inline GLBINDING_API void glBegin(GLenum mode);
inline GLBINDING_API void glBeginConditionalRender(GLuint id, GLenum mode);
inline GLBINDING_API void glBeginQuery(GLenum target, GLuint id);
inline GLBINDING_API void glBeginTransformFeedback(GLenum primitiveMode);
inline GLBINDING_API void glBindAttribLocation(GLuint program, GLuint index, const GLchar * name);
inline GLBINDING_API void glBindBuffer(GLenum target, GLuint buffer);
inline GLBINDING_API void glBindBufferBase(GLenum target, GLuint index, GLuint buffer);
inline GLBINDING_API void glBindBufferRange(GLenum target, GLuint index, GLuint buffer, GLintptr offset, GLsizeiptr size);
inline GLBINDING_API void glBindFragDataLocation(GLuint program, GLuint color, const GLchar * name);
inline GLBINDING_API void glBindFragDataLocationIndexed(GLuint program, GLuint colorNumber, GLuint index, const GLchar * name);
inline GLBINDING_API void glBindFramebuffer(GLenum target, GLuint framebuffer);
inline GLBINDING_API void glBindRenderbuffer(GLenum target, GLuint renderbuffer);
inline GLBINDING_API void glBindSampler(GLuint unit, GLuint sampler);
inline GLBINDING_API void glBindTexture(GLenum target, GLuint texture);
inline GLBINDING_API void glBindVertexArray(GLuint array);
inline GLBINDING_API void glBitmap(GLsizei width, GLsizei height, GLfloat xorig, GLfloat yorig, GLfloat xmove, GLfloat ymove, const GLubyte * bitmap);
inline GLBINDING_API void glBlendColor(GLfloat red, GLfloat green, GLfloat blue, GLfloat alpha);
inline GLBINDING_API void glBlendEquation(GLenum mode);
inline GLBINDING_API void glBlendEquationSeparate(GLenum modeRGB, GLenum modeAlpha);
inline GLBINDING_API void glBlendFunc(GLenum sfactor, GLenum dfactor);
inline GLBINDING_API void glBlendFuncSeparate(GLenum sfactorRGB, GLenum dfactorRGB, GLenum sfactorAlpha, GLenum dfactorAlpha);
inline GLBINDING_API void glBlitFramebuffer(GLint srcX0, GLint srcY0, GLint srcX1, GLint srcY1, GLint dstX0, GLint dstY0, GLint dstX1, GLint dstY1, ClearBufferMask mask, GLenum filter);
inline GLBINDING_API void glBufferData(GLenum target, GLsizeiptr size, const void * data, GLenum usage);
inline GLBINDING_API void glBufferSubData(GLenum target, GLintptr offset, GLsizeiptr size, const void * data);
inline GLBINDING_API void glCallList(GLuint list);
inline GLBINDING_API void glCallLists(GLsizei n, GLenum type, const void * lists);
inline GLBINDING_API GLenum glCheckFramebufferStatus(GLenum target);
inline GLBINDING_API void glClampColor(GLenum target, GLenum clamp);
inline GLBINDING_API void glClear(ClearBufferMask mask);
inline GLBINDING_API void glClearAccum(GLfloat red, GLfloat green, GLfloat blue, GLfloat alpha);
inline GLBINDING_API void glClearBufferfi(GLenum buffer, GLint drawbuffer, GLfloat depth, GLint stencil);
inline GLBINDING_API void glClearBufferfv(GLenum buffer, GLint drawbuffer, const GLfloat * value);
inline GLBINDING_API void glClearBufferiv(GLenum buffer, GLint drawbuffer, const GLint * value);
inline GLBINDING_API void glClearBufferuiv(GLenum buffer, GLint drawbuffer, const GLuint * value);
inline GLBINDING_API void glClearColor(GLfloat red, GLfloat green, GLfloat blue, GLfloat alpha);
inline GLBINDING_API void glClearDepth(GLdouble depth);
inline GLBINDING_API void glClearIndex(GLfloat c);
inline GLBINDING_API void glClearStencil(GLint s);
inline GLBINDING_API void glClientActiveTexture(GLenum texture);
inline GLBINDING_API GLenum glClientWaitSync(GLsync sync, SyncObjectMask flags, GLuint64 timeout);
inline GLBINDING_API void glClipPlane(GLenum plane, const GLdouble * equation);
inline GLBINDING_API void glColor3b(GLbyte red, GLbyte green, GLbyte blue);
inline GLBINDING_API void glColor3bv(const GLbyte * v);
inline GLBINDING_API void glColor3d(GLdouble red, GLdouble green, GLdouble blue);
inline GLBINDING_API void glColor3dv(const GLdouble * v);
inline GLBINDING_API void glColor3f(GLfloat red, GLfloat green, GLfloat blue);
inline GLBINDING_API void glColor3fv(const GLfloat * v);
inline GLBINDING_API void glColor3i(GLint red, GLint green, GLint blue);
inline GLBINDING_API void glColor3iv(const GLint * v);
inline GLBINDING_API void glColor3s(GLshort red, GLshort green, GLshort blue);
inline GLBINDING_API void glColor3sv(const GLshort * v);
inline GLBINDING_API void glColor3ub(GLubyte red, GLubyte green, GLubyte blue);
inline GLBINDING_API void glColor3ubv(const GLubyte * v);
inline GLBINDING_API void glColor3ui(GLuint red, GLuint green, GLuint blue);
inline GLBINDING_API void glColor3uiv(const GLuint * v);
inline GLBINDING_API void glColor3us(GLushort red, GLushort green, GLushort blue);
inline GLBINDING_API void glColor3usv(const GLushort * v);
inline GLBINDING_API void glColor4b(GLbyte red, GLbyte green, GLbyte blue, GLbyte alpha);
inline GLBINDING_API void glColor4bv(const GLbyte * v);
inline GLBINDING_API void glColor4d(GLdouble red, GLdouble green, GLdouble blue, GLdouble alpha);
inline GLBINDING_API void glColor4dv(const GLdouble * v);
inline GLBINDING_API void glColor4f(GLfloat red, GLfloat green, GLfloat blue, GLfloat alpha);
inline GLBINDING_API void glColor4fv(const GLfloat * v);
inline GLBINDING_API void glColor4i(GLint red, GLint green, GLint blue, GLint alpha);
inline GLBINDING_API void glColor4iv(const GLint * v);
inline GLBINDING_API void glColor4s(GLshort red, GLshort green, GLshort blue, GLshort alpha);
inline GLBINDING_API void glColor4sv(const GLshort * v);
inline GLBINDING_API void glColor4ub(GLubyte red, GLubyte green, GLubyte blue, GLubyte alpha);
inline GLBINDING_API void glColor4ubv(const GLubyte * v);
inline GLBINDING_API void glColor4ui(GLuint red, GLuint green, GLuint blue, GLuint alpha);
inline GLBINDING_API void glColor4uiv(const GLuint * v);
inline GLBINDING_API void glColor4us(GLushort red, GLushort green, GLushort blue, GLushort alpha);
inline GLBINDING_API void glColor4usv(const GLushort * v);
inline GLBINDING_API void glColorMask(GLboolean red, GLboolean green, GLboolean blue, GLboolean alpha);
inline GLBINDING_API void glColorMaski(GLuint index, GLboolean r, GLboolean g, GLboolean b, GLboolean a);
inline GLBINDING_API void glColorMaterial(GLenum face, GLenum mode);
inline GLBINDING_API void glColorP3ui(GLenum type, GLuint color);
inline GLBINDING_API void glColorP3uiv(GLenum type, const GLuint * color);
inline GLBINDING_API void glColorP4ui(GLenum type, GLuint color);
inline GLBINDING_API void glColorP4uiv(GLenum type, const GLuint * color);
inline GLBINDING_API void glColorPointer(GLint size, GLenum type, GLsizei stride, const void * pointer);
inline GLBINDING_API void glCompileShader(GLuint shader);
inline GLBINDING_API void glCompressedTexImage1D(GLenum target, GLint level, GLenum internalformat, GLsizei width, GLint border, GLsizei imageSize, const void * data);
inline GLBINDING_API void glCompressedTexImage2D(GLenum target, GLint level, GLenum internalformat, GLsizei width, GLsizei height, GLint border, GLsizei imageSize, const void * data);
inline GLBINDING_API void glCompressedTexImage3D(GLenum target, GLint level, GLenum internalformat, GLsizei width, GLsizei height, GLsizei depth, GLint border, GLsizei imageSize, const void * data);
inline GLBINDING_API void glCompressedTexSubImage1D(GLenum target, GLint level, GLint xoffset, GLsizei width, GLenum format, GLsizei imageSize, const void * data);
inline GLBINDING_API void glCompressedTexSubImage2D(GLenum target, GLint level, GLint xoffset, GLint yoffset, GLsizei width, GLsizei height, GLenum format, GLsizei imageSize, const void * data);
inline GLBINDING_API void glCompressedTexSubImage3D(GLenum target, GLint level, GLint xoffset, GLint yoffset, GLint zoffset, GLsizei width, GLsizei height, GLsizei depth, GLenum format, GLsizei imageSize, const void * data);
inline GLBINDING_API void glCopyBufferSubData(GLenum readTarget, GLenum writeTarget, GLintptr readOffset, GLintptr writeOffset, GLsizeiptr size);
inline GLBINDING_API void glCopyPixels(GLint x, GLint y, GLsizei width, GLsizei height, GLenum type);
inline GLBINDING_API void glCopyTexImage1D(GLenum target, GLint level, GLenum internalformat, GLint x, GLint y, GLsizei width, GLint border);
inline GLBINDING_API void glCopyTexImage2D(GLenum target, GLint level, GLenum internalformat, GLint x, GLint y, GLsizei width, GLsizei height, GLint border);
inline GLBINDING_API void glCopyTexSubImage1D(GLenum target, GLint level, GLint xoffset, GLint x, GLint y, GLsizei width);
inline GLBINDING_API void glCopyTexSubImage2D(GLenum target, GLint level, GLint xoffset, GLint yoffset, GLint x, GLint y, GLsizei width, GLsizei height);
inline GLBINDING_API void glCopyTexSubImage3D(GLenum target, GLint level, GLint xoffset, GLint yoffset, GLint zoffset, GLint x, GLint y, GLsizei width, GLsizei height);
inline GLBINDING_API GLuint glCreateProgram();
inline GLBINDING_API GLuint glCreateShader(GLenum type);
inline GLBINDING_API void glCullFace(GLenum mode);
inline GLBINDING_API void glDeleteBuffers(GLsizei n, const GLuint * buffers);
inline GLBINDING_API void glDeleteFramebuffers(GLsizei n, const GLuint * framebuffers);
inline GLBINDING_API void glDeleteLists(GLuint list, GLsizei range);
inline GLBINDING_API void glDeleteProgram(GLuint program);
inline GLBINDING_API void glDeleteQueries(GLsizei n, const GLuint * ids);
inline GLBINDING_API void glDeleteRenderbuffers(GLsizei n, const GLuint * renderbuffers);
inline GLBINDING_API void glDeleteSamplers(GLsizei count, const GLuint * samplers);
inline GLBINDING_API void glDeleteShader(GLuint shader);
inline GLBINDING_API void glDeleteSync(GLsync sync);
inline GLBINDING_API void glDeleteTextures(GLsizei n, const GLuint * textures);
inline GLBINDING_API void glDeleteVertexArrays(GLsizei n, const GLuint * arrays);
inline GLBINDING_API void glDepthFunc(GLenum func);
inline GLBINDING_API void glDepthMask(GLboolean flag);
inline GLBINDING_API void glDepthRange(GLdouble near_, GLdouble far_);
inline GLBINDING_API void glDetachShader(GLuint program, GLuint shader);
inline GLBINDING_API void glDisable(GLenum cap);
inline GLBINDING_API void glDisableClientState(GLenum array);
inline GLBINDING_API void glDisableVertexAttribArray(GLuint index);
inline GLBINDING_API void glDisablei(GLenum target, GLuint index);
inline GLBINDING_API void glDrawArrays(GLenum mode, GLint first, GLsizei count);
inline GLBINDING_API void glDrawArraysInstanced(GLenum mode, GLint first, GLsizei count, GLsizei instancecount);
inline GLBINDING_API void glDrawBuffer(GLenum buf);
inline GLBINDING_API void glDrawBuffers(GLsizei n, const GLenum * bufs);
inline GLBINDING_API void glDrawElements(GLenum mode, GLsizei count, GLenum type, const void * indices);
inline GLBINDING_API void glDrawElementsBaseVertex(GLenum mode, GLsizei count, GLenum type, const void * indices, GLint basevertex);
inline GLBINDING_API void glDrawElementsInstanced(GLenum mode, GLsizei count, GLenum type, const void * indices, GLsizei instancecount);
inline GLBINDING_API void glDrawElementsInstancedBaseVertex(GLenum mode, GLsizei count, GLenum type, const void * indices, GLsizei instancecount, GLint basevertex);
inline GLBINDING_API void glDrawPixels(GLsizei width, GLsizei height, GLenum format, GLenum type, const void * pixels);
inline GLBINDING_API void glDrawRangeElements(GLenum mode, GLuint start, GLuint end, GLsizei count, GLenum type, const void * indices);
inline GLBINDING_API void glDrawRangeElementsBaseVertex(GLenum mode, GLuint start, GLuint end, GLsizei count, GLenum type, const void * indices, GLint basevertex);
inline GLBINDING_API void glEdgeFlag(GLboolean flag);
inline GLBINDING_API void glEdgeFlagPointer(GLsizei stride, const void * pointer);
inline GLBINDING_API void glEdgeFlagv(const GLboolean * flag);
inline GLBINDING_API void glEnable(GLenum cap);
inline GLBINDING_API void glEnableClientState(GLenum array);
inline GLBINDING_API void glEnableVertexAttribArray(GLuint index);
inline GLBINDING_API void glEnablei(GLenum target, GLuint index);
inline GLBINDING_API void glEnd();
inline GLBINDING_API void glEndConditionalRender();
inline GLBINDING_API void glEndList();
inline GLBINDING_API void glEndQuery(GLenum target);
inline GLBINDING_API void glEndTransformFeedback();
inline GLBINDING_API void glEvalCoord1d(GLdouble u);
inline GLBINDING_API void glEvalCoord1dv(const GLdouble * u);
inline GLBINDING_API void glEvalCoord1f(GLfloat u);
inline GLBINDING_API void glEvalCoord1fv(const GLfloat * u);
inline GLBINDING_API void glEvalCoord2d(GLdouble u, GLdouble v);
inline GLBINDING_API void glEvalCoord2dv(const GLdouble * u);
inline GLBINDING_API void glEvalCoord2f(GLfloat u, GLfloat v);
inline GLBINDING_API void glEvalCoord2fv(const GLfloat * u);
inline GLBINDING_API void glEvalMesh1(GLenum mode, GLint i1, GLint i2);
inline GLBINDING_API void glEvalMesh2(GLenum mode, GLint i1, GLint i2, GLint j1, GLint j2);
inline GLBINDING_API void glEvalPoint1(GLint i);
inline GLBINDING_API void glEvalPoint2(GLint i, GLint j);
inline GLBINDING_API void glFeedbackBuffer(GLsizei size, GLenum type, GLfloat * buffer);
inline GLBINDING_API GLsync glFenceSync(GLenum condition, UnusedMask flags);
inline GLBINDING_API void glFinish();
inline GLBINDING_API void glFlush();
inline GLBINDING_API void glFlushMappedBufferRange(GLenum target, GLintptr offset, GLsizeiptr length);
inline GLBINDING_API void glFogCoordPointer(GLenum type, GLsizei stride, const void * pointer);
inline GLBINDING_API void glFogCoordd(GLdouble coord);
inline GLBINDING_API void glFogCoorddv(const GLdouble * coord);
inline GLBINDING_API void glFogCoordf(GLfloat coord);
inline GLBINDING_API void glFogCoordfv(const GLfloat * coord);
inline GLBINDING_API void glFogf(GLenum pname, GLfloat param);
inline GLBINDING_API void glFogfv(GLenum pname, const GLfloat * params);
inline GLBINDING_API void glFogi(GLenum pname, GLint param);
inline GLBINDING_API void glFogiv(GLenum pname, const GLint * params);
inline GLBINDING_API void glFramebufferRenderbuffer(GLenum target, GLenum attachment, GLenum renderbuffertarget, GLuint renderbuffer);
inline GLBINDING_API void glFramebufferTexture(GLenum target, GLenum attachment, GLuint texture, GLint level);
inline GLBINDING_API void glFramebufferTexture1D(GLenum target, GLenum attachment, GLenum textarget, GLuint texture, GLint level);
inline GLBINDING_API void glFramebufferTexture2D(GLenum target, GLenum attachment, GLenum textarget, GLuint texture, GLint level);
inline GLBINDING_API void glFramebufferTexture3D(GLenum target, GLenum attachment, GLenum textarget, GLuint texture, GLint level, GLint zoffset);
inline GLBINDING_API void glFramebufferTextureLayer(GLenum target, GLenum attachment, GLuint texture, GLint level, GLint layer);
inline GLBINDING_API void glFrontFace(GLenum mode);
inline GLBINDING_API void glFrustum(GLdouble left, GLdouble right, GLdouble bottom, GLdouble top, GLdouble zNear, GLdouble zFar);
inline GLBINDING_API void glGenBuffers(GLsizei n, GLuint * buffers);
inline GLBINDING_API void glGenFramebuffers(GLsizei n, GLuint * framebuffers);
inline GLBINDING_API GLuint glGenLists(GLsizei range);
inline GLBINDING_API void glGenQueries(GLsizei n, GLuint * ids);
inline GLBINDING_API void glGenRenderbuffers(GLsizei n, GLuint * renderbuffers);
inline GLBINDING_API void glGenSamplers(GLsizei count, GLuint * samplers);
inline GLBINDING_API void glGenTextures(GLsizei n, GLuint * textures);
inline GLBINDING_API void glGenVertexArrays(GLsizei n, GLuint * arrays);
inline GLBINDING_API void glGenerateMipmap(GLenum target);
inline GLBINDING_API void glGetActiveAttrib(GLuint program, GLuint index, GLsizei bufSize, GLsizei * length, GLint * size, GLenum * type, GLchar * name);
inline GLBINDING_API void glGetActiveUniform(GLuint program, GLuint index, GLsizei bufSize, GLsizei * length, GLint * size, GLenum * type, GLchar * name);
inline GLBINDING_API void glGetActiveUniformBlockName(GLuint program, GLuint uniformBlockIndex, GLsizei bufSize, GLsizei * length, GLchar * uniformBlockName);
inline GLBINDING_API void glGetActiveUniformBlockiv(GLuint program, GLuint uniformBlockIndex, GLenum pname, GLint * params);
inline GLBINDING_API void glGetActiveUniformName(GLuint program, GLuint uniformIndex, GLsizei bufSize, GLsizei * length, GLchar * uniformName);
inline GLBINDING_API void glGetActiveUniformsiv(GLuint program, GLsizei uniformCount, const GLuint * uniformIndices, GLenum pname, GLint * params);
inline GLBINDING_API void glGetAttachedShaders(GLuint program, GLsizei maxCount, GLsizei * count, GLuint * shaders);
inline GLBINDING_API GLint glGetAttribLocation(GLuint program, const GLchar * name);
inline GLBINDING_API void glGetBooleani_v(GLenum target, GLuint index, GLboolean * data);
inline GLBINDING_API void glGetBooleanv(GLenum pname, GLboolean * data);
inline GLBINDING_API void glGetBufferParameteri64v(GLenum target, GLenum pname, GLint64 * params);
inline GLBINDING_API void glGetBufferParameteriv(GLenum target, GLenum pname, GLint * params);
inline GLBINDING_API void glGetBufferPointerv(GLenum target, GLenum pname, void ** params);
inline GLBINDING_API void glGetBufferSubData(GLenum target, GLintptr offset, GLsizeiptr size, void * data);
inline GLBINDING_API void glGetClipPlane(GLenum plane, GLdouble * equation);
inline GLBINDING_API void glGetCompressedTexImage(GLenum target, GLint level, void * img);
inline GLBINDING_API void glGetDoublev(GLenum pname, GLdouble * data);
inline GLBINDING_API GLenum glGetError();
inline GLBINDING_API void glGetFloatv(GLenum pname, GLfloat * data);
inline GLBINDING_API GLint glGetFragDataIndex(GLuint program, const GLchar * name);
inline GLBINDING_API GLint glGetFragDataLocation(GLuint program, const GLchar * name);
inline GLBINDING_API void glGetFramebufferAttachmentParameteriv(GLenum target, GLenum attachment, GLenum pname, GLint * params);
inline GLBINDING_API void glGetInteger64i_v(GLenum target, GLuint index, GLint64 * data);
inline GLBINDING_API void glGetInteger64v(GLenum pname, GLint64 * data);
inline GLBINDING_API void glGetIntegeri_v(GLenum target, GLuint index, GLint * data);
inline GLBINDING_API void glGetIntegerv(GLenum pname, GLint * data);
inline GLBINDING_API void glGetLightfv(GLenum light, GLenum pname, GLfloat * params);
inline GLBINDING_API void glGetLightiv(GLenum light, GLenum pname, GLint * params);
inline GLBINDING_API void glGetMapdv(GLenum target, GLenum query, GLdouble * v);
inline GLBINDING_API void glGetMapfv(GLenum target, GLenum query, GLfloat * v);
inline GLBINDING_API void glGetMapiv(GLenum target, GLenum query, GLint * v);
inline GLBINDING_API void glGetMaterialfv(GLenum face, GLenum pname, GLfloat * params);
inline GLBINDING_API void glGetMaterialiv(GLenum face, GLenum pname, GLint * params);
inline GLBINDING_API void glGetMultisamplefv(GLenum pname, GLuint index, GLfloat * val);
inline GLBINDING_API void glGetPixelMapfv(GLenum map, GLfloat * values);
inline GLBINDING_API void glGetPixelMapuiv(GLenum map, GLuint * values);
inline GLBINDING_API void glGetPixelMapusv(GLenum map, GLushort * values);
inline GLBINDING_API void glGetPointerv(GLenum pname, void ** params);
inline GLBINDING_API void glGetPolygonStipple(GLubyte * mask);
inline GLBINDING_API void glGetProgramInfoLog(GLuint program, GLsizei bufSize, GLsizei * length, GLchar * infoLog);
inline GLBINDING_API void glGetProgramiv(GLuint program, GLenum pname, GLint * params);
inline GLBINDING_API void glGetQueryObjecti64v(GLuint id, GLenum pname, GLint64 * params);
inline GLBINDING_API void glGetQueryObjectiv(GLuint id, GLenum pname, GLint * params);
inline GLBINDING_API void glGetQueryObjectui64v(GLuint id, GLenum pname, GLuint64 * params);
inline GLBINDING_API void glGetQueryObjectuiv(GLuint id, GLenum pname, GLuint * params);
inline GLBINDING_API void glGetQueryiv(GLenum target, GLenum pname, GLint * params);
inline GLBINDING_API void glGetRenderbufferParameteriv(GLenum target, GLenum pname, GLint * params);
inline GLBINDING_API void glGetSamplerParameterIiv(GLuint sampler, GLenum pname, GLint * params);
inline GLBINDING_API void glGetSamplerParameterIuiv(GLuint sampler, GLenum pname, GLuint * params);
inline GLBINDING_API void glGetSamplerParameterfv(GLuint sampler, GLenum pname, GLfloat * params);
inline GLBINDING_API void glGetSamplerParameteriv(GLuint sampler, GLenum pname, GLint * params);
inline GLBINDING_API void glGetShaderInfoLog(GLuint shader, GLsizei bufSize, GLsizei * length, GLchar * infoLog);
inline GLBINDING_API void glGetShaderSource(GLuint shader, GLsizei bufSize, GLsizei * length, GLchar * source);
inline GLBINDING_API void glGetShaderiv(GLuint shader, GLenum pname, GLint * params);
inline GLBINDING_API const GLubyte * glGetString(GLenum name);
inline GLBINDING_API const GLubyte * glGetStringi(GLenum name, GLuint index);
inline GLBINDING_API void glGetSynciv(GLsync sync, GLenum pname, GLsizei bufSize, GLsizei * length, GLint * values);
inline GLBINDING_API void glGetTexEnvfv(GLenum target, GLenum pname, GLfloat * params);
inline GLBINDING_API void glGetTexEnviv(GLenum target, GLenum pname, GLint * params);
inline GLBINDING_API void glGetTexGendv(GLenum coord, GLenum pname, GLdouble * params);
inline GLBINDING_API void glGetTexGenfv(GLenum coord, GLenum pname, GLfloat * params);
inline GLBINDING_API void glGetTexGeniv(GLenum coord, GLenum pname, GLint * params);
inline GLBINDING_API void glGetTexImage(GLenum target, GLint level, GLenum format, GLenum type, void * pixels);
inline GLBINDING_API void glGetTexLevelParameterfv(GLenum target, GLint level, GLenum pname, GLfloat * params);
inline GLBINDING_API void glGetTexLevelParameteriv(GLenum target, GLint level, GLenum pname, GLint * params);
inline GLBINDING_API void glGetTexParameterIiv(GLenum target, GLenum pname, GLint * params);
inline GLBINDING_API void glGetTexParameterIuiv(GLenum target, GLenum pname, GLuint * params);
inline GLBINDING_API void glGetTexParameterfv(GLenum target, GLenum pname, GLfloat * params);
inline GLBINDING_API void glGetTexParameteriv(GLenum target, GLenum pname, GLint * params);
inline GLBINDING_API void glGetTransformFeedbackVarying(GLuint program, GLuint index, GLsizei bufSize, GLsizei * length, GLsizei * size, GLenum * type, GLchar * name);
inline GLBINDING_API GLuint glGetUniformBlockIndex(GLuint program, const GLchar * uniformBlockName);
inline GLBINDING_API void glGetUniformIndices(GLuint program, GLsizei uniformCount, const GLchar *const* uniformNames, GLuint * uniformIndices);
inline GLBINDING_API GLint glGetUniformLocation(GLuint program, const GLchar * name);
inline GLBINDING_API void glGetUniformfv(GLuint program, GLint location, GLfloat * params);
inline GLBINDING_API void glGetUniformiv(GLuint program, GLint location, GLint * params);
inline GLBINDING_API void glGetUniformuiv(GLuint program, GLint location, GLuint * params);
inline GLBINDING_API void glGetVertexAttribIiv(GLuint index, GLenum pname, GLint * params);
inline GLBINDING_API void glGetVertexAttribIuiv(GLuint index, GLenum pname, GLuint * params);
inline GLBINDING_API void glGetVertexAttribPointerv(GLuint index, GLenum pname, void ** pointer);
inline GLBINDING_API void glGetVertexAttribdv(GLuint index, GLenum pname, GLdouble * params);
inline GLBINDING_API void glGetVertexAttribfv(GLuint index, GLenum pname, GLfloat * params);
inline GLBINDING_API void glGetVertexAttribiv(GLuint index, GLenum pname, GLint * params);
inline GLBINDING_API void glHint(GLenum target, GLenum mode);
inline GLBINDING_API void glIndexMask(GLuint mask);
inline GLBINDING_API void glIndexPointer(GLenum type, GLsizei stride, const void * pointer);
inline GLBINDING_API void glIndexd(GLdouble c);
inline GLBINDING_API void glIndexdv(const GLdouble * c);
inline GLBINDING_API void glIndexf(GLfloat c);
inline GLBINDING_API void glIndexfv(const GLfloat * c);
inline GLBINDING_API void glIndexi(GLint c);
inline GLBINDING_API void glIndexiv(const GLint * c);
inline GLBINDING_API void glIndexs(GLshort c);
inline GLBINDING_API void glIndexsv(const GLshort * c);
inline GLBINDING_API void glIndexub(GLubyte c);
inline GLBINDING_API void glIndexubv(const GLubyte * c);
inline GLBINDING_API void glInitNames();
inline GLBINDING_API void glInterleavedArrays(GLenum format, GLsizei stride, const void * pointer);
inline GLBINDING_API GLboolean glIsBuffer(GLuint buffer);
inline GLBINDING_API GLboolean glIsEnabled(GLenum cap);
inline GLBINDING_API GLboolean glIsEnabledi(GLenum target, GLuint index);
inline GLBINDING_API GLboolean glIsFramebuffer(GLuint framebuffer);
inline GLBINDING_API GLboolean glIsList(GLuint list);
inline GLBINDING_API GLboolean glIsProgram(GLuint program);
inline GLBINDING_API GLboolean glIsQuery(GLuint id);
inline GLBINDING_API GLboolean glIsRenderbuffer(GLuint renderbuffer);
inline GLBINDING_API GLboolean glIsSampler(GLuint sampler);
inline GLBINDING_API GLboolean glIsShader(GLuint shader);
inline GLBINDING_API GLboolean glIsSync(GLsync sync);
inline GLBINDING_API GLboolean glIsTexture(GLuint texture);
inline GLBINDING_API GLboolean glIsVertexArray(GLuint array);
inline GLBINDING_API void glLightModelf(GLenum pname, GLfloat param);
inline GLBINDING_API void glLightModelfv(GLenum pname, const GLfloat * params);
inline GLBINDING_API void glLightModeli(GLenum pname, GLint param);
inline GLBINDING_API void glLightModeliv(GLenum pname, const GLint * params);
inline GLBINDING_API void glLightf(GLenum light, GLenum pname, GLfloat param);
inline GLBINDING_API void glLightfv(GLenum light, GLenum pname, const GLfloat * params);
inline GLBINDING_API void glLighti(GLenum light, GLenum pname, GLint param);
inline GLBINDING_API void glLightiv(GLenum light, GLenum pname, const GLint * params);
inline GLBINDING_API void glLineStipple(GLint factor, GLushort pattern);
inline GLBINDING_API void glLineWidth(GLfloat width);
inline GLBINDING_API void glLinkProgram(GLuint program);
inline GLBINDING_API void glListBase(GLuint base);
inline GLBINDING_API void glLoadIdentity();
inline GLBINDING_API void glLoadMatrixd(const GLdouble * m);
inline GLBINDING_API void glLoadMatrixf(const GLfloat * m);
inline GLBINDING_API void glLoadName(GLuint name);
inline GLBINDING_API void glLoadTransposeMatrixd(const GLdouble * m);
inline GLBINDING_API void glLoadTransposeMatrixf(const GLfloat * m);
inline GLBINDING_API void glLogicOp(GLenum opcode);
inline GLBINDING_API void glMap1d(GLenum target, GLdouble u1, GLdouble u2, GLint stride, GLint order, const GLdouble * points);
inline GLBINDING_API void glMap1f(GLenum target, GLfloat u1, GLfloat u2, GLint stride, GLint order, const GLfloat * points);
inline GLBINDING_API void glMap2d(GLenum target, GLdouble u1, GLdouble u2, GLint ustride, GLint uorder, GLdouble v1, GLdouble v2, GLint vstride, GLint vorder, const GLdouble * points);
inline GLBINDING_API void glMap2f(GLenum target, GLfloat u1, GLfloat u2, GLint ustride, GLint uorder, GLfloat v1, GLfloat v2, GLint vstride, GLint vorder, const GLfloat * points);
inline GLBINDING_API void * glMapBuffer(GLenum target, GLenum access);
inline GLBINDING_API void * glMapBufferRange(GLenum target, GLintptr offset, GLsizeiptr length, BufferAccessMask access);
inline GLBINDING_API void glMapGrid1d(GLint un, GLdouble u1, GLdouble u2);
inline GLBINDING_API void glMapGrid1f(GLint un, GLfloat u1, GLfloat u2);
inline GLBINDING_API void glMapGrid2d(GLint un, GLdouble u1, GLdouble u2, GLint vn, GLdouble v1, GLdouble v2);
inline GLBINDING_API void glMapGrid2f(GLint un, GLfloat u1, GLfloat u2, GLint vn, GLfloat v1, GLfloat v2);
inline GLBINDING_API void glMaterialf(GLenum face, GLenum pname, GLfloat param);
inline GLBINDING_API void glMaterialfv(GLenum face, GLenum pname, const GLfloat * params);
inline GLBINDING_API void glMateriali(GLenum face, GLenum pname, GLint param);
inline GLBINDING_API void glMaterialiv(GLenum face, GLenum pname, const GLint * params);
inline GLBINDING_API void glMatrixMode(GLenum mode);
inline GLBINDING_API void glMultMatrixd(const GLdouble * m);
inline GLBINDING_API void glMultMatrixf(const GLfloat * m);
inline GLBINDING_API void glMultTransposeMatrixd(const GLdouble * m);
inline GLBINDING_API void glMultTransposeMatrixf(const GLfloat * m);
inline GLBINDING_API void glMultiDrawArrays(GLenum mode, const GLint * first, const GLsizei * count, GLsizei drawcount);
inline GLBINDING_API void glMultiDrawElements(GLenum mode, const GLsizei * count, GLenum type, const void *const* indices, GLsizei drawcount);
inline GLBINDING_API void glMultiDrawElementsBaseVertex(GLenum mode, const GLsizei * count, GLenum type, const void *const* indices, GLsizei drawcount, const GLint * basevertex);
inline GLBINDING_API void glMultiTexCoord1d(GLenum target, GLdouble s);
inline GLBINDING_API void glMultiTexCoord1dv(GLenum target, const GLdouble * v);
inline GLBINDING_API void glMultiTexCoord1f(GLenum target, GLfloat s);
inline GLBINDING_API void glMultiTexCoord1fv(GLenum target, const GLfloat * v);
inline GLBINDING_API void glMultiTexCoord1i(GLenum target, GLint s);
inline GLBINDING_API void glMultiTexCoord1iv(GLenum target, const GLint * v);
inline GLBINDING_API void glMultiTexCoord1s(GLenum target, GLshort s);
inline GLBINDING_API void glMultiTexCoord1sv(GLenum target, const GLshort * v);
inline GLBINDING_API void glMultiTexCoord2d(GLenum target, GLdouble s, GLdouble t);
inline GLBINDING_API void glMultiTexCoord2dv(GLenum target, const GLdouble * v);
inline GLBINDING_API void glMultiTexCoord2f(GLenum target, GLfloat s, GLfloat t);
inline GLBINDING_API void glMultiTexCoord2fv(GLenum target, const GLfloat * v);
inline GLBINDING_API void glMultiTexCoord2i(GLenum target, GLint s, GLint t);
inline GLBINDING_API void glMultiTexCoord2iv(GLenum target, const GLint * v);
inline GLBINDING_API void glMultiTexCoord2s(GLenum target, GLshort s, GLshort t);
inline GLBINDING_API void glMultiTexCoord2sv(GLenum target, const GLshort * v);
inline GLBINDING_API void glMultiTexCoord3d(GLenum target, GLdouble s, GLdouble t, GLdouble r);
inline GLBINDING_API void glMultiTexCoord3dv(GLenum target, const GLdouble * v);
inline GLBINDING_API void glMultiTexCoord3f(GLenum target, GLfloat s, GLfloat t, GLfloat r);
inline GLBINDING_API void glMultiTexCoord3fv(GLenum target, const GLfloat * v);
inline GLBINDING_API void glMultiTexCoord3i(GLenum target, GLint s, GLint t, GLint r);
inline GLBINDING_API void glMultiTexCoord3iv(GLenum target, const GLint * v);
inline GLBINDING_API void glMultiTexCoord3s(GLenum target, GLshort s, GLshort t, GLshort r);
inline GLBINDING_API void glMultiTexCoord3sv(GLenum target, const GLshort * v);
inline GLBINDING_API void glMultiTexCoord4d(GLenum target, GLdouble s, GLdouble t, GLdouble r, GLdouble q);
inline GLBINDING_API void glMultiTexCoord4dv(GLenum target, const GLdouble * v);
inline GLBINDING_API void glMultiTexCoord4f(GLenum target, GLfloat s, GLfloat t, GLfloat r, GLfloat q);
inline GLBINDING_API void glMultiTexCoord4fv(GLenum target, const GLfloat * v);
inline GLBINDING_API void glMultiTexCoord4i(GLenum target, GLint s, GLint t, GLint r, GLint q);
inline GLBINDING_API void glMultiTexCoord4iv(GLenum target, const GLint * v);
inline GLBINDING_API void glMultiTexCoord4s(GLenum target, GLshort s, GLshort t, GLshort r, GLshort q);
inline GLBINDING_API void glMultiTexCoord4sv(GLenum target, const GLshort * v);
inline GLBINDING_API void glMultiTexCoordP1ui(GLenum texture, GLenum type, GLuint coords);
inline GLBINDING_API void glMultiTexCoordP1uiv(GLenum texture, GLenum type, const GLuint * coords);
inline GLBINDING_API void glMultiTexCoordP2ui(GLenum texture, GLenum type, GLuint coords);
inline GLBINDING_API void glMultiTexCoordP2uiv(GLenum texture, GLenum type, const GLuint * coords);
inline GLBINDING_API void glMultiTexCoordP3ui(GLenum texture, GLenum type, GLuint coords);
inline GLBINDING_API void glMultiTexCoordP3uiv(GLenum texture, GLenum type, const GLuint * coords);
inline GLBINDING_API void glMultiTexCoordP4ui(GLenum texture, GLenum type, GLuint coords);
inline GLBINDING_API void glMultiTexCoordP4uiv(GLenum texture, GLenum type, const GLuint * coords);
inline GLBINDING_API void glNewList(GLuint list, GLenum mode);
inline GLBINDING_API void glNormal3b(GLbyte nx, GLbyte ny, GLbyte nz);
inline GLBINDING_API void glNormal3bv(const GLbyte * v);
inline GLBINDING_API void glNormal3d(GLdouble nx, GLdouble ny, GLdouble nz);
inline GLBINDING_API void glNormal3dv(const GLdouble * v);
inline GLBINDING_API void glNormal3f(GLfloat nx, GLfloat ny, GLfloat nz);
inline GLBINDING_API void glNormal3fv(const GLfloat * v);
inline GLBINDING_API void glNormal3i(GLint nx, GLint ny, GLint nz);
inline GLBINDING_API void glNormal3iv(const GLint * v);
inline GLBINDING_API void glNormal3s(GLshort nx, GLshort ny, GLshort nz);
inline GLBINDING_API void glNormal3sv(const GLshort * v);
inline GLBINDING_API void glNormalP3ui(GLenum type, GLuint coords);
inline GLBINDING_API void glNormalP3uiv(GLenum type, const GLuint * coords);
inline GLBINDING_API void glNormalPointer(GLenum type, GLsizei stride, const void * pointer);
inline GLBINDING_API void glOrtho(GLdouble left, GLdouble right, GLdouble bottom, GLdouble top, GLdouble zNear, GLdouble zFar);
inline GLBINDING_API void glPassThrough(GLfloat token);
inline GLBINDING_API void glPixelMapfv(GLenum map, GLsizei mapsize, const GLfloat * values);
inline GLBINDING_API void glPixelMapuiv(GLenum map, GLsizei mapsize, const GLuint * values);
inline GLBINDING_API void glPixelMapusv(GLenum map, GLsizei mapsize, const GLushort * values);
inline GLBINDING_API void glPixelStoref(GLenum pname, GLfloat param);
inline GLBINDING_API void glPixelStorei(GLenum pname, GLint param);
inline GLBINDING_API void glPixelTransferf(GLenum pname, GLfloat param);
inline GLBINDING_API void glPixelTransferi(GLenum pname, GLint param);
inline GLBINDING_API void glPixelZoom(GLfloat xfactor, GLfloat yfactor);
inline GLBINDING_API void glPointParameterf(GLenum pname, GLfloat param);
inline GLBINDING_API void glPointParameterfv(GLenum pname, const GLfloat * params);
inline GLBINDING_API void glPointParameteri(GLenum pname, GLint param);
inline GLBINDING_API void glPointParameteriv(GLenum pname, const GLint * params);
inline GLBINDING_API void glPointSize(GLfloat size);
inline GLBINDING_API void glPolygonMode(GLenum face, GLenum mode);
inline GLBINDING_API void glPolygonOffset(GLfloat factor, GLfloat units);
inline GLBINDING_API void glPolygonStipple(const GLubyte * mask);
inline GLBINDING_API void glPopAttrib();
inline GLBINDING_API void glPopClientAttrib();
inline GLBINDING_API void glPopMatrix();
inline GLBINDING_API void glPopName();
inline GLBINDING_API void glPrimitiveRestartIndex(GLuint index);
inline GLBINDING_API void glPrioritizeTextures(GLsizei n, const GLuint * textures, const GLfloat * priorities);
inline GLBINDING_API void glProvokingVertex(GLenum mode);
inline GLBINDING_API void glPushAttrib(AttribMask mask);
inline GLBINDING_API void glPushClientAttrib(ClientAttribMask mask);
inline GLBINDING_API void glPushMatrix();
inline GLBINDING_API void glPushName(GLuint name);
inline GLBINDING_API void glQueryCounter(GLuint id, GLenum target);
inline GLBINDING_API void glRasterPos2d(GLdouble x, GLdouble y);
inline GLBINDING_API void glRasterPos2dv(const GLdouble * v);
inline GLBINDING_API void glRasterPos2f(GLfloat x, GLfloat y);
inline GLBINDING_API void glRasterPos2fv(const GLfloat * v);
inline GLBINDING_API void glRasterPos2i(GLint x, GLint y);
inline GLBINDING_API void glRasterPos2iv(const GLint * v);
inline GLBINDING_API void glRasterPos2s(GLshort x, GLshort y);
inline GLBINDING_API void glRasterPos2sv(const GLshort * v);
inline GLBINDING_API void glRasterPos3d(GLdouble x, GLdouble y, GLdouble z);
inline GLBINDING_API void glRasterPos3dv(const GLdouble * v);
inline GLBINDING_API void glRasterPos3f(GLfloat x, GLfloat y, GLfloat z);
inline GLBINDING_API void glRasterPos3fv(const GLfloat * v);
inline GLBINDING_API void glRasterPos3i(GLint x, GLint y, GLint z);
inline GLBINDING_API void glRasterPos3iv(const GLint * v);
inline GLBINDING_API void glRasterPos3s(GLshort x, GLshort y, GLshort z);
inline GLBINDING_API void glRasterPos3sv(const GLshort * v);
inline GLBINDING_API void glRasterPos4d(GLdouble x, GLdouble y, GLdouble z, GLdouble w);
inline GLBINDING_API void glRasterPos4dv(const GLdouble * v);
inline GLBINDING_API void glRasterPos4f(GLfloat x, GLfloat y, GLfloat z, GLfloat w);
inline GLBINDING_API void glRasterPos4fv(const GLfloat * v);
inline GLBINDING_API void glRasterPos4i(GLint x, GLint y, GLint z, GLint w);
inline GLBINDING_API void glRasterPos4iv(const GLint * v);
inline GLBINDING_API void glRasterPos4s(GLshort x, GLshort y, GLshort z, GLshort w);
inline GLBINDING_API void glRasterPos4sv(const GLshort * v);
inline GLBINDING_API void glReadBuffer(GLenum src);
inline GLBINDING_API void glReadPixels(GLint x, GLint y, GLsizei width, GLsizei height, GLenum format, GLenum type, void * pixels);
inline GLBINDING_API void glRectd(GLdouble x1, GLdouble y1, GLdouble x2, GLdouble y2);
inline GLBINDING_API void glRectdv(const GLdouble * v1, const GLdouble * v2);
inline GLBINDING_API void glRectf(GLfloat x1, GLfloat y1, GLfloat x2, GLfloat y2);
inline GLBINDING_API void glRectfv(const GLfloat * v1, const GLfloat * v2);
inline GLBINDING_API void glRecti(GLint x1, GLint y1, GLint x2, GLint y2);
inline GLBINDING_API void glRectiv(const GLint * v1, const GLint * v2);
inline GLBINDING_API void glRects(GLshort x1, GLshort y1, GLshort x2, GLshort y2);
inline GLBINDING_API void glRectsv(const GLshort * v1, const GLshort * v2);
inline GLBINDING_API GLint glRenderMode(GLenum mode);
inline GLBINDING_API void glRenderbufferStorage(GLenum target, GLenum internalformat, GLsizei width, GLsizei height);
inline GLBINDING_API void glRenderbufferStorageMultisample(GLenum target, GLsizei samples, GLenum internalformat, GLsizei width, GLsizei height);
inline GLBINDING_API void glRotated(GLdouble angle, GLdouble x, GLdouble y, GLdouble z);
inline GLBINDING_API void glRotatef(GLfloat angle, GLfloat x, GLfloat y, GLfloat z);
inline GLBINDING_API void glSampleCoverage(GLfloat value, GLboolean invert);
inline GLBINDING_API void glSampleMaski(GLuint maskNumber, GLbitfield mask);
inline GLBINDING_API void glSamplerParameterIiv(GLuint sampler, GLenum pname, const GLint * param);
inline GLBINDING_API void glSamplerParameterIuiv(GLuint sampler, GLenum pname, const GLuint * param);
inline GLBINDING_API void glSamplerParameterf(GLuint sampler, GLenum pname, GLfloat param);
inline GLBINDING_API void glSamplerParameterfv(GLuint sampler, GLenum pname, const GLfloat * param);
inline GLBINDING_API void glSamplerParameteri(GLuint sampler, GLenum pname, GLint param);
inline GLBINDING_API void glSamplerParameteriv(GLuint sampler, GLenum pname, const GLint * param);
inline GLBINDING_API void glScaled(GLdouble x, GLdouble y, GLdouble z);
inline GLBINDING_API void glScalef(GLfloat x, GLfloat y, GLfloat z);
inline GLBINDING_API void glScissor(GLint x, GLint y, GLsizei width, GLsizei height);
inline GLBINDING_API void glSecondaryColor3b(GLbyte red, GLbyte green, GLbyte blue);
inline GLBINDING_API void glSecondaryColor3bv(const GLbyte * v);
inline GLBINDING_API void glSecondaryColor3d(GLdouble red, GLdouble green, GLdouble blue);
inline GLBINDING_API void glSecondaryColor3dv(const GLdouble * v);
inline GLBINDING_API void glSecondaryColor3f(GLfloat red, GLfloat green, GLfloat blue);
inline GLBINDING_API void glSecondaryColor3fv(const GLfloat * v);
inline GLBINDING_API void glSecondaryColor3i(GLint red, GLint green, GLint blue);
inline GLBINDING_API void glSecondaryColor3iv(const GLint * v);
inline GLBINDING_API void glSecondaryColor3s(GLshort red, GLshort green, GLshort blue);
inline GLBINDING_API void glSecondaryColor3sv(const GLshort * v);
inline GLBINDING_API void glSecondaryColor3ub(GLubyte red, GLubyte green, GLubyte blue);
inline GLBINDING_API void glSecondaryColor3ubv(const GLubyte * v);
inline GLBINDING_API void glSecondaryColor3ui(GLuint red, GLuint green, GLuint blue);
inline GLBINDING_API void glSecondaryColor3uiv(const GLuint * v);
inline GLBINDING_API void glSecondaryColor3us(GLushort red, GLushort green, GLushort blue);
inline GLBINDING_API void glSecondaryColor3usv(const GLushort * v);
inline GLBINDING_API void glSecondaryColorP3ui(GLenum type, GLuint color);
inline GLBINDING_API void glSecondaryColorP3uiv(GLenum type, const GLuint * color);
inline GLBINDING_API void glSecondaryColorPointer(GLint size, GLenum type, GLsizei stride, const void * pointer);
inline GLBINDING_API void glSelectBuffer(GLsizei size, GLuint * buffer);
inline GLBINDING_API void glShadeModel(GLenum mode);
inline GLBINDING_API void glShaderSource(GLuint shader, GLsizei count, const GLchar *const* string, const GLint * length);
inline GLBINDING_API void glStencilFunc(GLenum func, GLint ref, GLuint mask);
inline GLBINDING_API void glStencilFuncSeparate(GLenum face, GLenum func, GLint ref, GLuint mask);
inline GLBINDING_API void glStencilMask(GLuint mask);
inline GLBINDING_API void glStencilMaskSeparate(GLenum face, GLuint mask);
inline GLBINDING_API void glStencilOp(GLenum fail, GLenum zfail, GLenum zpass);
inline GLBINDING_API void glStencilOpSeparate(GLenum face, GLenum sfail, GLenum dpfail, GLenum dppass);
inline GLBINDING_API void glTexBuffer(GLenum target, GLenum internalformat, GLuint buffer);
inline GLBINDING_API void glTexCoord1d(GLdouble s);
inline GLBINDING_API void glTexCoord1dv(const GLdouble * v);
inline GLBINDING_API void glTexCoord1f(GLfloat s);
inline GLBINDING_API void glTexCoord1fv(const GLfloat * v);
inline GLBINDING_API void glTexCoord1i(GLint s);
inline GLBINDING_API void glTexCoord1iv(const GLint * v);
inline GLBINDING_API void glTexCoord1s(GLshort s);
inline GLBINDING_API void glTexCoord1sv(const GLshort * v);
inline GLBINDING_API void glTexCoord2d(GLdouble s, GLdouble t);
inline GLBINDING_API void glTexCoord2dv(const GLdouble * v);
inline GLBINDING_API void glTexCoord2f(GLfloat s, GLfloat t);
inline GLBINDING_API void glTexCoord2fv(const GLfloat * v);
inline GLBINDING_API void glTexCoord2i(GLint s, GLint t);
inline GLBINDING_API void glTexCoord2iv(const GLint * v);
inline GLBINDING_API void glTexCoord2s(GLshort s, GLshort t);
inline GLBINDING_API void glTexCoord2sv(const GLshort * v);
inline GLBINDING_API void glTexCoord3d(GLdouble s, GLdouble t, GLdouble r);
inline GLBINDING_API void glTexCoord3dv(const GLdouble * v);
inline GLBINDING_API void glTexCoord3f(GLfloat s, GLfloat t, GLfloat r);
inline GLBINDING_API void glTexCoord3fv(const GLfloat * v);
inline GLBINDING_API void glTexCoord3i(GLint s, GLint t, GLint r);
inline GLBINDING_API void glTexCoord3iv(const GLint * v);
inline GLBINDING_API void glTexCoord3s(GLshort s, GLshort t, GLshort r);
inline GLBINDING_API void glTexCoord3sv(const GLshort * v);
inline GLBINDING_API void glTexCoord4d(GLdouble s, GLdouble t, GLdouble r, GLdouble q);
inline GLBINDING_API void glTexCoord4dv(const GLdouble * v);
inline GLBINDING_API void glTexCoord4f(GLfloat s, GLfloat t, GLfloat r, GLfloat q);
inline GLBINDING_API void glTexCoord4fv(const GLfloat * v);
inline GLBINDING_API void glTexCoord4i(GLint s, GLint t, GLint r, GLint q);
inline GLBINDING_API void glTexCoord4iv(const GLint * v);
inline GLBINDING_API void glTexCoord4s(GLshort s, GLshort t, GLshort r, GLshort q);
inline GLBINDING_API void glTexCoord4sv(const GLshort * v);
inline GLBINDING_API void glTexCoordP1ui(GLenum type, GLuint coords);
inline GLBINDING_API void glTexCoordP1uiv(GLenum type, const GLuint * coords);
inline GLBINDING_API void glTexCoordP2ui(GLenum type, GLuint coords);
inline GLBINDING_API void glTexCoordP2uiv(GLenum type, const GLuint * coords);
inline GLBINDING_API void glTexCoordP3ui(GLenum type, GLuint coords);
inline GLBINDING_API void glTexCoordP3uiv(GLenum type, const GLuint * coords);
inline GLBINDING_API void glTexCoordP4ui(GLenum type, GLuint coords);
inline GLBINDING_API void glTexCoordP4uiv(GLenum type, const GLuint * coords);
inline GLBINDING_API void glTexCoordPointer(GLint size, GLenum type, GLsizei stride, const void * pointer);
inline GLBINDING_API void glTexEnvf(GLenum target, GLenum pname, GLfloat param);
inline GLBINDING_API void glTexEnvfv(GLenum target, GLenum pname, const GLfloat * params);
inline GLBINDING_API void glTexEnvi(GLenum target, GLenum pname, GLint param);
inline GLBINDING_API void glTexEnviv(GLenum target, GLenum pname, const GLint * params);
inline GLBINDING_API void glTexGend(GLenum coord, GLenum pname, GLdouble param);
inline GLBINDING_API void glTexGendv(GLenum coord, GLenum pname, const GLdouble * params);
inline GLBINDING_API void glTexGenf(GLenum coord, GLenum pname, GLfloat param);
inline GLBINDING_API void glTexGenfv(GLenum coord, GLenum pname, const GLfloat * params);
inline GLBINDING_API void glTexGeni(GLenum coord, GLenum pname, GLint param);
inline GLBINDING_API void glTexGeniv(GLenum coord, GLenum pname, const GLint * params);
inline GLBINDING_API void glTexImage1D(GLenum target, GLint level, GLint internalformat, GLsizei width, GLint border, GLenum format, GLenum type, const void * pixels);
inline GLBINDING_API void glTexImage2D(GLenum target, GLint level, GLint internalformat, GLsizei width, GLsizei height, GLint border, GLenum format, GLenum type, const void * pixels);
inline GLBINDING_API void glTexImage2DMultisample(GLenum target, GLsizei samples, GLenum internalformat, GLsizei width, GLsizei height, GLboolean fixedsamplelocations);
inline GLBINDING_API void glTexImage3D(GLenum target, GLint level, GLint internalformat, GLsizei width, GLsizei height, GLsizei depth, GLint border, GLenum format, GLenum type, const void * pixels);
inline GLBINDING_API void glTexImage3DMultisample(GLenum target, GLsizei samples, GLenum internalformat, GLsizei width, GLsizei height, GLsizei depth, GLboolean fixedsamplelocations);
inline GLBINDING_API void glTexParameterIiv(GLenum target, GLenum pname, const GLint * params);
inline GLBINDING_API void glTexParameterIuiv(GLenum target, GLenum pname, const GLuint * params);
inline GLBINDING_API void glTexParameterf(GLenum target, GLenum pname, GLfloat param);
inline GLBINDING_API void glTexParameterfv(GLenum target, GLenum pname, const GLfloat * params);
inline GLBINDING_API void glTexParameteri(GLenum target, GLenum pname, GLint param);
inline GLBINDING_API void glTexParameteriv(GLenum target, GLenum pname, const GLint * params);
inline GLBINDING_API void glTexSubImage1D(GLenum target, GLint level, GLint xoffset, GLsizei width, GLenum format, GLenum type, const void * pixels);
inline GLBINDING_API void glTexSubImage2D(GLenum target, GLint level, GLint xoffset, GLint yoffset, GLsizei width, GLsizei height, GLenum format, GLenum type, const void * pixels);
inline GLBINDING_API void glTexSubImage3D(GLenum target, GLint level, GLint xoffset, GLint yoffset, GLint zoffset, GLsizei width, GLsizei height, GLsizei depth, GLenum format, GLenum type, const void * pixels);
inline GLBINDING_API void glTransformFeedbackVaryings(GLuint program, GLsizei count, const GLchar *const* varyings, GLenum bufferMode);
inline GLBINDING_API void glTranslated(GLdouble x, GLdouble y, GLdouble z);
inline GLBINDING_API void glTranslatef(GLfloat x, GLfloat y, GLfloat z);
inline GLBINDING_API void glUniform1f(GLint location, GLfloat v0);
inline GLBINDING_API void glUniform1fv(GLint location, GLsizei count, const GLfloat * value);
inline GLBINDING_API void glUniform1i(GLint location, GLint v0);
inline GLBINDING_API void glUniform1iv(GLint location, GLsizei count, const GLint * value);
inline GLBINDING_API void glUniform1ui(GLint location, GLuint v0);
inline GLBINDING_API void glUniform1uiv(GLint location, GLsizei count, const GLuint * value);
inline GLBINDING_API void glUniform2f(GLint location, GLfloat v0, GLfloat v1);
inline GLBINDING_API void glUniform2fv(GLint location, GLsizei count, const GLfloat * value);
inline GLBINDING_API void glUniform2i(GLint location, GLint v0, GLint v1);
inline GLBINDING_API void glUniform2iv(GLint location, GLsizei count, const GLint * value);
inline GLBINDING_API void glUniform2ui(GLint location, GLuint v0, GLuint v1);
inline GLBINDING_API void glUniform2uiv(GLint location, GLsizei count, const GLuint * value);
inline GLBINDING_API void glUniform3f(GLint location, GLfloat v0, GLfloat v1, GLfloat v2);
inline GLBINDING_API void glUniform3fv(GLint location, GLsizei count, const GLfloat * value);
inline GLBINDING_API void glUniform3i(GLint location, GLint v0, GLint v1, GLint v2);
inline GLBINDING_API void glUniform3iv(GLint location, GLsizei count, const GLint * value);
inline GLBINDING_API void glUniform3ui(GLint location, GLuint v0, GLuint v1, GLuint v2);
inline GLBINDING_API void glUniform3uiv(GLint location, GLsizei count, const GLuint * value);
inline GLBINDING_API void glUniform4f(GLint location, GLfloat v0, GLfloat v1, GLfloat v2, GLfloat v3);
inline GLBINDING_API void glUniform4fv(GLint location, GLsizei count, const GLfloat * value);
inline GLBINDING_API void glUniform4i(GLint location, GLint v0, GLint v1, GLint v2, GLint v3);
inline GLBINDING_API void glUniform4iv(GLint location, GLsizei count, const GLint * value);
inline GLBINDING_API void glUniform4ui(GLint location, GLuint v0, GLuint v1, GLuint v2, GLuint v3);
inline GLBINDING_API void glUniform4uiv(GLint location, GLsizei count, const GLuint * value);
inline GLBINDING_API void glUniformBlockBinding(GLuint program, GLuint uniformBlockIndex, GLuint uniformBlockBinding);
inline GLBINDING_API void glUniformMatrix2fv(GLint location, GLsizei count, GLboolean transpose, const GLfloat * value);
inline GLBINDING_API void glUniformMatrix2x3fv(GLint location, GLsizei count, GLboolean transpose, const GLfloat * value);
inline GLBINDING_API void glUniformMatrix2x4fv(GLint location, GLsizei count, GLboolean transpose, const GLfloat * value);
inline GLBINDING_API void glUniformMatrix3fv(GLint location, GLsizei count, GLboolean transpose, const GLfloat * value);
inline GLBINDING_API void glUniformMatrix3x2fv(GLint location, GLsizei count, GLboolean transpose, const GLfloat * value);
inline GLBINDING_API void glUniformMatrix3x4fv(GLint location, GLsizei count, GLboolean transpose, const GLfloat * value);
inline GLBINDING_API void glUniformMatrix4fv(GLint location, GLsizei count, GLboolean transpose, const GLfloat * value);
inline GLBINDING_API void glUniformMatrix4x2fv(GLint location, GLsizei count, GLboolean transpose, const GLfloat * value);
inline GLBINDING_API void glUniformMatrix4x3fv(GLint location, GLsizei count, GLboolean transpose, const GLfloat * value);
inline GLBINDING_API GLboolean glUnmapBuffer(GLenum target);
inline GLBINDING_API void glUseProgram(GLuint program);
inline GLBINDING_API void glValidateProgram(GLuint program);
inline GLBINDING_API void glVertex2d(GLdouble x, GLdouble y);
inline GLBINDING_API void glVertex2dv(const GLdouble * v);
inline GLBINDING_API void glVertex2f(GLfloat x, GLfloat y);
inline GLBINDING_API void glVertex2fv(const GLfloat * v);
inline GLBINDING_API void glVertex2i(GLint x, GLint y);
inline GLBINDING_API void glVertex2iv(const GLint * v);
inline GLBINDING_API void glVertex2s(GLshort x, GLshort y);
inline GLBINDING_API void glVertex2sv(const GLshort * v);
inline GLBINDING_API void glVertex3d(GLdouble x, GLdouble y, GLdouble z);
inline GLBINDING_API void glVertex3dv(const GLdouble * v);
inline GLBINDING_API void glVertex3f(GLfloat x, GLfloat y, GLfloat z);
inline GLBINDING_API void glVertex3fv(const GLfloat * v);
inline GLBINDING_API void glVertex3i(GLint x, GLint y, GLint z);
inline GLBINDING_API void glVertex3iv(const GLint * v);
inline GLBINDING_API void glVertex3s(GLshort x, GLshort y, GLshort z);
inline GLBINDING_API void glVertex3sv(const GLshort * v);
inline GLBINDING_API void glVertex4d(GLdouble x, GLdouble y, GLdouble z, GLdouble w);
inline GLBINDING_API void glVertex4dv(const GLdouble * v);
inline GLBINDING_API void glVertex4f(GLfloat x, GLfloat y, GLfloat z, GLfloat w);
inline GLBINDING_API void glVertex4fv(const GLfloat * v);
inline GLBINDING_API void glVertex4i(GLint x, GLint y, GLint z, GLint w);
inline GLBINDING_API void glVertex4iv(const GLint * v);
inline GLBINDING_API void glVertex4s(GLshort x, GLshort y, GLshort z, GLshort w);
inline GLBINDING_API void glVertex4sv(const GLshort * v);
inline GLBINDING_API void glVertexAttrib1d(GLuint index, GLdouble x);
inline GLBINDING_API void glVertexAttrib1dv(GLuint index, const GLdouble * v);
inline GLBINDING_API void glVertexAttrib1f(GLuint index, GLfloat x);
inline GLBINDING_API void glVertexAttrib1fv(GLuint index, const GLfloat * v);
inline GLBINDING_API void glVertexAttrib1s(GLuint index, GLshort x);
inline GLBINDING_API void glVertexAttrib1sv(GLuint index, const GLshort * v);
inline GLBINDING_API void glVertexAttrib2d(GLuint index, GLdouble x, GLdouble y);
inline GLBINDING_API void glVertexAttrib2dv(GLuint index, const GLdouble * v);
inline GLBINDING_API void glVertexAttrib2f(GLuint index, GLfloat x, GLfloat y);
inline GLBINDING_API void glVertexAttrib2fv(GLuint index, const GLfloat * v);
inline GLBINDING_API void glVertexAttrib2s(GLuint index, GLshort x, GLshort y);
inline GLBINDING_API void glVertexAttrib2sv(GLuint index, const GLshort * v);
inline GLBINDING_API void glVertexAttrib3d(GLuint index, GLdouble x, GLdouble y, GLdouble z);
inline GLBINDING_API void glVertexAttrib3dv(GLuint index, const GLdouble * v);
inline GLBINDING_API void glVertexAttrib3f(GLuint index, GLfloat x, GLfloat y, GLfloat z);
inline GLBINDING_API void glVertexAttrib3fv(GLuint index, const GLfloat * v);
inline GLBINDING_API void glVertexAttrib3s(GLuint index, GLshort x, GLshort y, GLshort z);
inline GLBINDING_API void glVertexAttrib3sv(GLuint index, const GLshort * v);
inline GLBINDING_API void glVertexAttrib4Nbv(GLuint index, const GLbyte * v);
inline GLBINDING_API void glVertexAttrib4Niv(GLuint index, const GLint * v);
inline GLBINDING_API void glVertexAttrib4Nsv(GLuint index, const GLshort * v);
inline GLBINDING_API void glVertexAttrib4Nub(GLuint index, GLubyte x, GLubyte y, GLubyte z, GLubyte w);
inline GLBINDING_API void glVertexAttrib4Nubv(GLuint index, const GLubyte * v);
inline GLBINDING_API void glVertexAttrib4Nuiv(GLuint index, const GLuint * v);
inline GLBINDING_API void glVertexAttrib4Nusv(GLuint index, const GLushort * v);
inline GLBINDING_API void glVertexAttrib4bv(GLuint index, const GLbyte * v);
inline GLBINDING_API void glVertexAttrib4d(GLuint index, GLdouble x, GLdouble y, GLdouble z, GLdouble w);
inline GLBINDING_API void glVertexAttrib4dv(GLuint index, const GLdouble * v);
inline GLBINDING_API void glVertexAttrib4f(GLuint index, GLfloat x, GLfloat y, GLfloat z, GLfloat w);
inline GLBINDING_API void glVertexAttrib4fv(GLuint index, const GLfloat * v);
inline GLBINDING_API void glVertexAttrib4iv(GLuint index, const GLint * v);
inline GLBINDING_API void glVertexAttrib4s(GLuint index, GLshort x, GLshort y, GLshort z, GLshort w);
inline GLBINDING_API void glVertexAttrib4sv(GLuint index, const GLshort * v);
inline GLBINDING_API void glVertexAttrib4ubv(GLuint index, const GLubyte * v);
inline GLBINDING_API void glVertexAttrib4uiv(GLuint index, const GLuint * v);
inline GLBINDING_API void glVertexAttrib4usv(GLuint index, const GLushort * v);
inline GLBINDING_API void glVertexAttribDivisor(GLuint index, GLuint divisor);
inline GLBINDING_API void glVertexAttribI1i(GLuint index, GLint x);
inline GLBINDING_API void glVertexAttribI1iv(GLuint index, const GLint * v);
inline GLBINDING_API void glVertexAttribI1ui(GLuint index, GLuint x);
inline GLBINDING_API void glVertexAttribI1uiv(GLuint index, const GLuint * v);
inline GLBINDING_API void glVertexAttribI2i(GLuint index, GLint x, GLint y);
inline GLBINDING_API void glVertexAttribI2iv(GLuint index, const GLint * v);
inline GLBINDING_API void glVertexAttribI2ui(GLuint index, GLuint x, GLuint y);
inline GLBINDING_API void glVertexAttribI2uiv(GLuint index, const GLuint * v);
inline GLBINDING_API void glVertexAttribI3i(GLuint index, GLint x, GLint y, GLint z);
inline GLBINDING_API void glVertexAttribI3iv(GLuint index, const GLint * v);
inline GLBINDING_API void glVertexAttribI3ui(GLuint index, GLuint x, GLuint y, GLuint z);
inline GLBINDING_API void glVertexAttribI3uiv(GLuint index, const GLuint * v);
inline GLBINDING_API void glVertexAttribI4bv(GLuint index, const GLbyte * v);
inline GLBINDING_API void glVertexAttribI4i(GLuint index, GLint x, GLint y, GLint z, GLint w);
inline GLBINDING_API void glVertexAttribI4iv(GLuint index, const GLint * v);
inline GLBINDING_API void glVertexAttribI4sv(GLuint index, const GLshort * v);
inline GLBINDING_API void glVertexAttribI4ubv(GLuint index, const GLubyte * v);
inline GLBINDING_API void glVertexAttribI4ui(GLuint index, GLuint x, GLuint y, GLuint z, GLuint w);
inline GLBINDING_API void glVertexAttribI4uiv(GLuint index, const GLuint * v);
inline GLBINDING_API void glVertexAttribI4usv(GLuint index, const GLushort * v);
inline GLBINDING_API void glVertexAttribIPointer(GLuint index, GLint size, GLenum type, GLsizei stride, const void * pointer);
inline GLBINDING_API void glVertexAttribP1ui(GLuint index, GLenum type, GLboolean normalized, GLuint value);
inline GLBINDING_API void glVertexAttribP1uiv(GLuint index, GLenum type, GLboolean normalized, const GLuint * value);
inline GLBINDING_API void glVertexAttribP2ui(GLuint index, GLenum type, GLboolean normalized, GLuint value);
inline GLBINDING_API void glVertexAttribP2uiv(GLuint index, GLenum type, GLboolean normalized, const GLuint * value);
inline GLBINDING_API void glVertexAttribP3ui(GLuint index, GLenum type, GLboolean normalized, GLuint value);
inline GLBINDING_API void glVertexAttribP3uiv(GLuint index, GLenum type, GLboolean normalized, const GLuint * value);
inline GLBINDING_API void glVertexAttribP4ui(GLuint index, GLenum type, GLboolean normalized, GLuint value);
inline GLBINDING_API void glVertexAttribP4uiv(GLuint index, GLenum type, GLboolean normalized, const GLuint * value);
inline GLBINDING_API void glVertexAttribPointer(GLuint index, GLint size, GLenum type, GLboolean normalized, GLsizei stride, const void * pointer);
inline GLBINDING_API void glVertexP2ui(GLenum type, GLuint value);
inline GLBINDING_API void glVertexP2uiv(GLenum type, const GLuint * value);
inline GLBINDING_API void glVertexP3ui(GLenum type, GLuint value);
inline GLBINDING_API void glVertexP3uiv(GLenum type, const GLuint * value);
inline GLBINDING_API void glVertexP4ui(GLenum type, GLuint value);
inline GLBINDING_API void glVertexP4uiv(GLenum type, const GLuint * value);
inline GLBINDING_API void glVertexPointer(GLint size, GLenum type, GLsizei stride, const void * pointer);
inline GLBINDING_API void glViewport(GLint x, GLint y, GLsizei width, GLsizei height);
inline GLBINDING_API void glWaitSync(GLsync sync, UnusedMask flags, GLuint64 timeout);
inline GLBINDING_API void glWindowPos2d(GLdouble x, GLdouble y);
inline GLBINDING_API void glWindowPos2dv(const GLdouble * v);
inline GLBINDING_API void glWindowPos2f(GLfloat x, GLfloat y);
inline GLBINDING_API void glWindowPos2fv(const GLfloat * v);
inline GLBINDING_API void glWindowPos2i(GLint x, GLint y);
inline GLBINDING_API void glWindowPos2iv(const GLint * v);
inline GLBINDING_API void glWindowPos2s(GLshort x, GLshort y);
inline GLBINDING_API void glWindowPos2sv(const GLshort * v);
inline GLBINDING_API void glWindowPos3d(GLdouble x, GLdouble y, GLdouble z);
inline GLBINDING_API void glWindowPos3dv(const GLdouble * v);
inline GLBINDING_API void glWindowPos3f(GLfloat x, GLfloat y, GLfloat z);
inline GLBINDING_API void glWindowPos3fv(const GLfloat * v);
inline GLBINDING_API void glWindowPos3i(GLint x, GLint y, GLint z);
inline GLBINDING_API void glWindowPos3iv(const GLint * v);
inline GLBINDING_API void glWindowPos3s(GLshort x, GLshort y, GLshort z);
inline GLBINDING_API void glWindowPos3sv(const GLshort * v);

} // namespace gl33
